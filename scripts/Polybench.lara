import clava.autopar.Parallelize;
import lara.Io;
import lara.util.LocalFolder;
import clava.ClavaJoinPoints;
import lara.cmake.CMaker;
import weaver.util.WeaverDataStore;
import lara.code.Timer;
import lara.metrics.ExecutionTimeMetric;
import weaver.Query;

aspectdef Polybench
	input
		sourceFolder,
		benchmarkFolders
	end

	var benchmarks = getSubFolders(sourceFolder, benchmarkFolders);

	var polybenchUtilsFolder = Io.getAbsolutePath(sourceFolder + "utilities/");
	var polybenchCPath = Io.getPath(polybenchUtilsFolder, "polybench.c");

	println("Number of benchmarks found: " + benchmarks.length);
	println("Processing benchmarks");
	for (benchmark of benchmarks) {
		println("Processing: " + benchmark.folder);
		
		Clava.pushAst();
		rebuildCodeAst(polybenchUtilsFolder, polybenchCPath, benchmark);
		Clava.pushAst();

		var measuresSeq = addTimerSeq();
		buildAndRun(benchmark, false);
		Clava.popAst();

		parallelizeLoops();
		var measuresPar = addTimerPar();
		buildAndRun(benchmark, true);
		Clava.popAst();
	}

end

function getSubFolders(sourceFolder, benchmarkFolders) {
	if (benchmarkFolders.length == 1 && benchmarkFolders[0] == "all")
		benchmarkFolders = ["datamining", "linear-algebra", "medley", "stencils"];

	var benchmarks = [];
	var foldersChecked = [];

	for (folder of benchmarkFolders) {
		var folderPath = sourceFolder + folder;
		
		if(!Io.isFolder(folderPath)) {
			println(folderPath + " is not a valid folder.");
			continue;
		}

		var folder = new LocalFolder(folderPath);
		var fileList = folder.getFileList();

		for (file of fileList) {
			var fileString = file.toString();
			if(fileString.slice(-2) != ".c")
				continue;

			var benchmark = createBenchmarkObj(fileString);
			if(foldersChecked.contains(benchmark.folder))
				continue;

			benchmarks.push(benchmark);
			foldersChecked.push(benchmark.folder);

		}
	}
	return benchmarks;
}

function createBenchmarkObj(fileString) {
	var benchmark = new Object();
			
	var lastSlash = fileString.lastIndexOf("/");
	var polyIndex = fileString.indexOf("polybench");
	benchmark.c = Io.getAbsolutePath(fileString);
	benchmark.folder = Io.getAbsolutePath(fileString.slice(0, lastSlash));
	benchmark.outputFolder = fileString.slice(polyIndex, lastSlash);
	benchmark.name = Io.removeExtension(fileString.substring(lastSlash + 1));

	return benchmark;
}

function rebuildCodeAst(polybenchUtilsFolder, polybenchCPath, benchmark) {
	var dataStore = Clava.getData();
	dataStore.setUserIncludes(polybenchUtilsFolder, benchmark.folder);

	var $polyC = ClavaJoinPoints.file(polybenchCPath);
	var $benchC = ClavaJoinPoints.file(benchmark.c);
	Clava.addFile($polyC);
	Clava.addFile($benchC);

	Clava.rebuild();
}

function addTimerSeq() {

	var measures = [];

	for(var result of Query.search('function').search('loop').chain()) {
		// Only time loops inside Polybench kernel functions
		if(!result["function"].name.startsWith("kernel_") || !result["loop"].isOutermost) {
			continue;
		}

		var measure = new ExecutionTimeMetric(result["loop"].id);
		measures.push(measure);
		
		measure.instrument(result["loop"]);
	}

	return measures;
}

function addTimerPar() {
	var measures = [];
	
	for(var result of Query.search('pragma')) {
		if(result.name != "omp")
			continue;

		var measure = new ExecutionTimeMetric(result.content);
		measures.push(measure);
		
		measure.instrument(result, result.target);
		
	}

	return measures;
}


function parallelizeLoops() {
	var $loops = [];

	for(var result of Query.search('function').search('loop').chain()) {
		// Only time loops inside Polybench kernel functions
		if(!result["function"].name.startsWith("kernel_") || !result["loop"].isOutermost) {
			continue;
		}

		$loops.push(result["loop"]);
	}

	Parallelize.forLoops($loops);
}

function buildAndRun(benchmark, isPar) {
	var subFolder = "";
	if(isPar)
		subFolder = "/par";
	else
		subFolder = "/seq";

	var folder = Io.mkdir("outputs/" + benchmark.outputFolder + subFolder);
		var buildFolder = Io.mkdir("outputs/" + benchmark.outputFolder + subFolder + "/build");
		Clava.writeCode(folder);

		var cmaker = new CMaker(benchmark.name);

		cmaker.addCurrentAst();
		cmaker.addLibs("m");
		cmaker.addFlags("-O3");	
		if(isPar)
			cmaker.addFlags("-fopenmp");
	
		var exe = cmaker.build(folder, buildFolder);
	
		println("Exe: " + exe);
	
		var executor = new ProcessExecutor();
		executor.setPrintToConsole(true);
		var exeOutput = executor.execute(exe.getAbsolutePath());
	
		println("output");
		printlnObject(exeOutput);
		println("output from executor: " + executor.getConsoleOutput());
}

/*
	output
		a =10, b = "string";
	end
*/
	