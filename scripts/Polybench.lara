import clava.autopar.Parallelize;
import clava.autopar.ParallelizeLoop;
import lara.Io;
import lara.util.LocalFolder;
import clava.ClavaJoinPoints;
import lara.cmake.CMaker;
import weaver.util.WeaverDataStore;
import lara.code.Timer;
import lara.metrics.ExecutionTimeMetric;
import weaver.Query;
import lara.Strings;

import CustomExecutionTimeMetric;
import CustomParallelize;

var now;

aspectdef Polybench
	input
		sourceFolder,
		benchmarkFolders
	end

	now = new Date(Date.now());

	var start_time = performance.now();
	var nRuns = 3;

	var polybenchResults = {};
	polybenchResults["runsPerVersion"] = nRuns;
	polybenchResults["totalRuns"] = 0;
	polybenchResults["totalVersions"] = 0;
	polybenchResults["totalParLoops"] = 0;
	polybenchResults["totalExecutionTimeInSec"] = 0;
	polybenchResults["totalBenchmarks"] = 0;
	polybenchResults["benchmarks"] = [];

	var benchmarks = getSubFolders(sourceFolder, benchmarkFolders);

	polybenchResults["totalBenchmarks"] = benchmarks.length;

	var polybenchUtilsFolder = Io.getAbsolutePath(sourceFolder + "utilities/");
	var polybenchCPath = Io.getPath(polybenchUtilsFolder, "polybench.c");

	println("Number of benchmarks found: " + benchmarks.length);
	println("Processing benchmarks");
	for (var benchmark of benchmarks) {
		println("Processing: " + benchmark.folder);

		Clava.pushAst();
		rebuildCodeAst(polybenchUtilsFolder, polybenchCPath, benchmark);
		Clava.pushAst();

		var benchmarkResults = {};
		benchmarkResults["benchmark"] = benchmark.folder;
		
		benchmarkResults["par"] = {};
		benchmarkResults["par"]["nVersions"] = 0;
		benchmarkResults["par"]["versions"] = [];
		benchmarkResults["seq"] = [];

		var loopToIndex = {};
		var mainLoops = [];

		var parLoops = getParLoops();
		polybenchResults["totalParLoops"] += parLoops.length;
		
		var parLoopGroups = getParLoopGroups(parLoops, mainLoops);
		addLoopInfo(parLoops, benchmarkResults, loopToIndex, mainLoops);
		Clava.popAst();

		polybenchResults["totalVersions"] += parLoopGroups.length;
		polybenchResults["totalRuns"] += parLoopGroups.length * nRuns;
		var version = 0;
		for (var loopGroup of parLoopGroups) {
			Clava.pushAst();

			CustomParallelize.forLoops(loopGroup);

			var measuresPar = addTimerPar(loopGroup, loopToIndex, mainLoops);
			var executorsPar = buildAndRun(benchmark, version, nRuns, true);
			var loopIndexes = getLoopIndexes(loopGroup, loopToIndex);
			var mainLoopIndexes = getLoopIndexes(mainLoops, loopToIndex);
			addResults(benchmarkResults, measuresPar, executorsPar, true, loopIndexes, version, mainLoopIndexes);
			version++;
			Clava.popAst();
		}
		
		var parLoopIds = getLoopIds(parLoops);

		var measuresSeq = addTimerSeq(parLoopIds, loopToIndex);
		var executorsSeq = buildAndRun(benchmark, version, nRuns, false);	
		addResults(benchmarkResults, measuresSeq, executorsSeq, false, null, null, null);
		Clava.popAst();
		
		polybenchResults["benchmarks"].push(benchmarkResults);
		Io.writeJson(benchmark.outputFolder + "/results.json", benchmarkResults);
	}
	var end_time = performance.now();
	polybenchResults["totalExecutionTimeInSec"] = (end_time - start_time) / 1000;
	
	Io.writeJson("./results/polybench_" + now.toISOString() + ".json", polybenchResults);

end

function getLoopIndexes(loopGroup, loopToIndex) {
	var indexes = [];
	for(var loop of loopGroup) {
		indexes.push(loopToIndex[loop.id]);
	}

	return indexes;
}

function addLoopInfo(parLoops, benchmarkResults, loopToIndex, mainLoops) {
	benchmarkResults["nLoops"] = parLoops.length;
	benchmarkResults["loops"] = {};
	var mainLoopIds = getLoopIds(mainLoops);
	var index = 0;
	for(var $loop of parLoops) {
		benchmarkResults["loops"][index] = {};
		benchmarkResults["loops"][index]["id"] = $loop.id;
		benchmarkResults["loops"][index]["origLine"] = $loop.line;
		benchmarkResults["loops"][index]["iterations"] = $loop.iterations;
		benchmarkResults["loops"][index]["nestedLevel"] = $loop.nestedLevel;
		benchmarkResults["loops"][index]["isMainLoop"] = mainLoopIds.includes($loop.id);
		benchmarkResults["loops"][index]["isInnermost"] = $loop.isInnermost;
		benchmarkResults["loops"][index]["isOutermost"] = $loop.isOutermost;
		benchmarkResults["loops"][index]["rank"] = Array.from($loop.rank);

		var pragmas = [];
		for(var $pragma of $loop.pragmas) {
			pragmas.push($pragma.code);
		}
		
		benchmarkResults["loops"][index]["pragmas"] = pragmas;

		loopToIndex[$loop.id] = index;
		index++;
	}
}

function getLoopIds($loops) {
	var loopIds = [];

	for (var $loop of $loops) {
		loopIds.push($loop.id);
	}

	return loopIds;
}

function addResults(benchmarkResults, measures, executors, isPar, loopIndexes, version, mainLoopIndexes) {
	var name = "";
	var info = {};
	if (isPar) {
		name = "par";
		benchmarkResults["par"]["nVersions"] += 1;
		info["version"] = version;
		info["parLoops"] = Array.from(loopIndexes);
		info["mainLoop"] = 0;
		info["measures"] = [];
	}
	else
		name = "seq";

	for(var measure of measures) {
		var measureInfo = {};
		measureInfo["loopIndex"] = parseInt(measure._prefix);
		measureInfo["runs"] = [];
		var runId = 0;
		for(var executor of executors) {
			var res = measure.report(executor);
			var newRes = {};
			newRes.value = res.getValue();
			newRes.unit = res.getUnit();
			if(isPar) {
				measureInfo["runs"].push(newRes);
			}
			else {
				measureInfo["runs"].push(newRes);
			}
			runId++;
		}

		if(isPar) {
			info["measures"].push(measureInfo);
			if(mainLoopIndexes.includes(parseInt(measure._prefix)))
				info["mainLoop"] = parseInt(measure._prefix);
		}
		else {
			benchmarkResults["seq"].push(measureInfo);
		}
	}

	if(isPar) {
		benchmarkResults["par"]["versions"].push(info);
	}
	
}

function getSubFolders(sourceFolder, benchmarkFolders) {
	if (benchmarkFolders.length == 1 && benchmarkFolders[0] == "all")
		benchmarkFolders = ["datamining", "linear-algebra", "medley", "stencils"];

	var benchmarks = [];
	var foldersChecked = [];

	for (var folder of benchmarkFolders) {
		var folderPath = sourceFolder + folder;
		
		if(!Io.isFolder(folderPath)) {
			println(folderPath + " is not a valid folder.");
			continue;
		}

		var folder = new LocalFolder(folderPath);
		var fileList = folder.getFileList();

		for (var file of fileList) {
			var fileString = file.toString();
			if(fileString.slice(-2) != ".c")
				continue;

			var benchmark = createBenchmarkObj(fileString);
			if(foldersChecked.contains(benchmark.folder))
				continue;

			benchmarks.push(benchmark);
			foldersChecked.push(benchmark.folder);

		}
	}
	return benchmarks;
}

function createBenchmarkObj(fileString) {
	var benchmark = new Object();
			
	var lastSlash = fileString.lastIndexOf("/");
	var polyIndex = fileString.indexOf("polybench");
	benchmark.c = Io.getAbsolutePath(fileString);
	benchmark.folder = Io.getAbsolutePath(fileString.slice(0, lastSlash));
	benchmark.outputFolder = Io.getAbsolutePath("./outputs/" + fileString.slice(polyIndex, lastSlash));
	benchmark.name = Io.removeExtension(fileString.substring(lastSlash + 1));

	return benchmark;
}

function rebuildCodeAst(polybenchUtilsFolder, polybenchCPath, benchmark) {
	var dataStore = Clava.getData();
	dataStore.setUserIncludes(polybenchUtilsFolder, benchmark.folder);

	var $polyC = ClavaJoinPoints.file(polybenchCPath);
	var $benchC = ClavaJoinPoints.file(benchmark.c);
	Clava.addFile($polyC);
	Clava.addFile($benchC);

	Clava.rebuild();
}

function addTimerSeq(parallelLoopIds, loopToIndex) {

	var measures = [];

	for(var result of Query.search('function').search('loop').chain()) {
		if(!parallelLoopIds.includes(result["loop"].id)) {
			continue;
		}

		var measure = new CustomExecutionTimeMetric(loopToIndex[result["loop"].id].toString());
		measures.push(measure);
		
		measure.instrument(result["loop"]);
	}

	return measures;
}

function addTimerMainLoop(mainLoopId, loopToIndex) {
	var measure;
	for(var result of Query.search('function').search('loop').chain()) {
		if(result["loop"].id != mainLoopId) {
			continue;
		}

		measure = new CustomExecutionTimeMetric(loopToIndex[result["loop"].id].toString());	
		measure.instrument(result["loop"], undefined, true);
		break;
	}
	return measure;
}

function addTimerPar($loopGroup, loopToIndex, mainLoops) {
	var measures = [];
	var loopGroupIds = getLoopIds($loopGroup);
	var mainLoopIds = getLoopIds(mainLoops);
	var foundMainLoop = false;
	
	for(var result of Query.search('pragma')) {
		if(result.name != "omp")
			continue;

		var pragmaLoop = result.target;
		if(!loopGroupIds.includes(pragmaLoop.id))
			continue;

		var measure = new CustomExecutionTimeMetric(loopToIndex[result.target.id].toString());
		measures.push(measure);

		var addExitStatement = false;
		if(mainLoopIds.includes(result.target.id)) {
			addExitStatement = true;
			foundMainLoop = true;
		}
		
		measure.instrument(result, result.target, addExitStatement);
		
	}

	if(!foundMainLoop) {
		var mainLoopMeasure = findAndTimeMainLoop($loopGroup[0], loopToIndex, mainLoops);
		measures.push(mainLoopMeasure);
	}

	return measures;
}

function findAndTimeMainLoop($loop, loopToIndex, $mainLoops) {
	var mainLoopMeasure;
	for(var $mainLoop of $mainLoops) {
		if(checkRankDescendant($loop.rank, $mainLoop.rank)) {
			mainLoopMeasure = addTimerMainLoop($mainLoop.id, loopToIndex);
		}
	}

	return mainLoopMeasure;
}

/**
checks if loop with the rank loopRank0 is descendant from the loop with the rank loopRank1
@param loopRank0 int[], rank from loop we intend to check
@param loopRank1 int[], rank from loop we intend to check against
@return true if loop with the rank loopRank0 is descendant from the loop with the rank loopRank1
**/
function checkRankDescendant(loopRank0, loopRank1) {
	if(loopRank0.length <= loopRank1.length)
		return false;
	
	for(var i = 0; i < loopRank1.length; i++) {
		if(loopRank1[i] != loopRank0[i])
			return false;
	}

	return true;
}

function getParLoopGroups($parLoops, mainLoops) {
	var $loopGroups = [];
	var processedIds = [];
	var parLoopIds = getLoopIds($parLoops);
	var currLvl = 0;

	while(processedIds.length < $parLoops.length) {

		for(var $loop of $parLoops) {
			if($loop.nestedLevel != currLvl || processedIds.includes($loop.id))
				continue;
		
			var currentGroup = [];
			currentGroup.push([$loop]);
			processedIds.push($loop.id);
			mainLoops.push($loop);
			
			var $loopDescendants = $loop.descendants("loop");
			for(var $descendant of $loopDescendants) {
				if(!parLoopIds.includes($descendant.id)) {
					continue;
				}

				processedIds.push($descendant.id);
				var toAdd = [];
				for(var loops of currentGroup) {
					var newLoops = Array.from(loops);
					newLoops.push($descendant);
					toAdd.push(newLoops);
				}

				for(var elem of toAdd) {
					currentGroup.push(elem);
				}

				currentGroup.push([$descendant]);
			}
	
			for(var elem of currentGroup) {
				$loopGroups.push(elem);
			}
			
		}

		currLvl += 1;
		
	}

	return $loopGroups;
}

function getParLoops() {
	var loops = [];

	for(var result of Query.search('function').search('loop').chain()) {
		// Only time loops inside Polybench kernel functions

		if(!result["function"].name.startsWith("kernel_")) {
			continue;
		}

		loops.push(result["loop"]);
	}

	Parallelize.forLoops(loops);

	var pragmas = Parallelize.getForLoopsPragmas(loops);
	var astIds = Object.keys(pragmas["parallelLoops"]);

	var parLoops = [];
	for(var loop of loops) {
		if(astIds.includes(loop.astId)) {
			parLoops.push(loop);
		}
	}

	return parLoops;
}

function buildAndRun(benchmark, compoundId, nRuns, isPar) {
	var subFolder = "";

	var compoundIdStr = "";
	
	if(isPar) {
		compoundIdStr = String(compoundId);
		compoundIdStr = Strings.replacer(compoundIdStr, / /g, "_");
		subFolder = "/par/" + compoundIdStr;
	}
	else
		subFolder = "/seq";
	
	var folder = Io.mkdir(benchmark.outputFolder + subFolder);
	var buildFolder = Io.mkdir(benchmark.outputFolder + subFolder + "/build");
	Clava.writeCode(folder);

	var cmaker = new CMaker(benchmark.name);

	cmaker.addCurrentAst();
	cmaker.addLibs("m");
	cmaker.addFlags("-O3");	
	if(isPar)
		cmaker.addFlags("-fopenmp");

	var exe = cmaker.build(folder, buildFolder);

	var executors = [];
	var i;
	
	for(i = 0; i < nRuns; i++) {
		var executor = new ProcessExecutor();	
		executor.setPrintToConsole(false);
		var exeOutput = executor.execute(exe.getAbsolutePath());
		executors.push(executor);
	}
	

	return executors;
}
	