import ProgramAnalyzer;
import ModelTester;

import clava.Clava;
import lara.Io;

import lara.cmake.CMaker;
import lara.util.ProcessExecutor;

import weaver.WeaverJps;

aspectdef Launcher

	var mainParams = readParamsObj("mainParams");

	if(mainParams["displayParamsHelp"]) {
		displayParamsHelp();
	}
	
	for(var paramToCreate of mainParams["paramsToCreate"]) {
		if(paramToCreate == "mainParams") {
			println("ERROR: " + paramToCreate + " is not a valid input for the field \"paramsToCreate\". Skipping this input.");
			continue;
		}

		createParamsObj(paramToCreate);
	}

	for(var paramToLoad of mainParams["paramsToLoad"]) {
		if(paramToLoad == "mainParams") {
			println("ERROR: " + paramToLoad + " is not a valid input for the field \"paramsToLoad\". Skipping this input.");
			continue;
		}

		var loadedParams = readParamsObj(paramToLoad);
		var now = new Date(Date.now());
		call ProgramAnalyzer(loadedParams, now);
	}

	for(var resultToTest of mainParams["modelResultsToTest"]) {
		if(resultToTest == "mainParams") {
			println("ERROR: " + resultToTest + " is not a valid input for the field \"modelResultsToTest\". Skipping this input.");
			continue;
		}

		var loadedResults = readParamsObj(resultToTest);
		var now = new Date(Date.now());
		call ModelTester(loadedResults, now);
	}
	
end

function createParamsObj(filename) {
	var params = {};

	params["benchGroupName"] = "";
	params["nRuns"] = 0;
	params["loopGroupSizeLimit"] = 0;
	params["sourceFolder"] = "";
	params["isBenchmarkSet"] = true;
	params["benchmarkFolders"] = [];
	params["foldersToGetExpectedC"] = [];
	params["problemSizeFlags"] = [];
	params["defaultFlag"] = "";
	params["functionFilters"] = [];
	params["excludedFiles"] = [];
	params["excludedFolders"] = [];
	params["xtraFiles"] = [];
	params["xtraIncludeFolders"] = [];
	params["compilationFlags"] = [];
	params["compilationLibs"] = [];
	params["preprocessorFlags"] = [];
	params["expectedReturnValue"] = 0;
	
	params["autoParSelectorFlags"] = {};
	params["autoParSelectorFlags"]["testPragmas"] = 0;
	params["autoParSelectorFlags"]["readCache"] = false;
	params["autoParSelectorFlags"]["readFromExpectedOutput"] = false;
	params["autoParSelectorFlags"]["onlyCalculateCaches"] = false;
	params["autoParSelectorFlags"]["expressionBasedIterCounting"] = false;
	params["autoParSelectorFlags"]["cleanBuilds"] = false;
	params["autoParSelectorFlags"]["extractDynamicFeatures"] = true;
	

	var path = "." + folderSeparator + "params" + folderSeparator + filename + ".json";
	Io.writeJson(path, params);
}

function readParamsObj(filename) {
	var path = "." + folderSeparator + "params" + folderSeparator + filename + ".json";
	var paramsObj = Io.readJson(path);

	return paramsObj;
}

function displayParamsHelp() {
	println("PARAM FILES HELPER");
}
