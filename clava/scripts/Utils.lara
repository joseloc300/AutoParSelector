import clava.autopar.Parallelize;
import lara.Io;
import lara.util.LocalFolder;
import clava.ClavaJoinPoints;
import lara.cmake.CMaker;
import weaver.util.WeaverDataStore;
import lara.code.Timer;
import lara.metrics.ExecutionTimeMetric;
import weaver.Query;
import lara.Strings;

function getLoopIndexes(loopGroup, parLoops) {
	var indexes = [];
	for(var loopId of loopGroup) {
		indexes.push(parLoops[loopId]["index"]);
	}

	return indexes;
}

function countLoopIterations(loops) {
	
}

function addLoopInfo(parLoops, benchmarkResults) {
	benchmarkResults["nLoops"] = parLoops.length;
	benchmarkResults["loops"] = {};
	var parLoopIds = Object.keys(parLoops);
	var $loopJps = getLoopsFromIds(parLoopIds);
	
	var index = 0;
	for(var loopId of parLoopIds) {
		var $loop = $loopJps[loopId];
		
		var loopInstructionInfo = getInstructionInfo($loop);

		println("loop iterations = " + $loop.iterations);
		
		benchmarkResults["loops"][index] = {};
		benchmarkResults["loops"][index]["id"] = $loop.id;
		benchmarkResults["loops"][index]["origLine"] = $loop.line;
		benchmarkResults["loops"][index]["iterations"] = $loop.iterationsExpr.code;
		benchmarkResults["loops"][index]["nestedLevel"] = $loop.nestedLevel;
		benchmarkResults["loops"][index]["isMainLoop"] = parLoops[loopId]["isMainLoop"];
		benchmarkResults["loops"][index]["isInnermost"] = $loop.isInnermost;
		benchmarkResults["loops"][index]["isOutermost"] = $loop.isOutermost;
		benchmarkResults["loops"][index]["rank"] = Array.from($loop.rank);
		benchmarkResults["loops"][index]["arithmeticInstructions"] = loopInstructionInfo["arithmeticInstructions"];
		benchmarkResults["loops"][index]["logicInstructions"] = loopInstructionInfo["logicInstructions"];
		benchmarkResults["loops"][index]["comparisonInstructions"] = loopInstructionInfo["comparisonInstructions"];
		benchmarkResults["loops"][index]["assignmentInstructions"] = loopInstructionInfo["assignmentInstructions"];
		benchmarkResults["loops"][index]["bitwiseInstructions"] = loopInstructionInfo["bitwiseInstructions"];
		//benchmarkResults["loops"][index]["totalALUInstructions"] = loopInstructionInfo["totalALUInstructions"];
		benchmarkResults["loops"][index]["ifInstructions"] = loopInstructionInfo["ifInstructions"];
		benchmarkResults["loops"][index]["loopInstructions"] = loopInstructionInfo["loopInstructions"];
		benchmarkResults["loops"][index]["varDeclarationInstructions"] = loopInstructionInfo["varDeclarationInstructions"];
		benchmarkResults["loops"][index]["arrayAccessInstructions"] = loopInstructionInfo["arrayAccessInstructions"];
		benchmarkResults["loops"][index]["totalInstructions"] = loopInstructionInfo["totalInstructions"];
		benchmarkResults["loops"][index]["level0FunctionCalls"] = loopInstructionInfo["level0FunctionCalls"];
		benchmarkResults["loops"][index]["totalFunctionCalls"] = loopInstructionInfo["totalFunctionCalls"];
		benchmarkResults["loops"][index]["hasRecursiveFunctionCall"] = loopInstructionInfo["hasRecursiveFunctionCall"];
		benchmarkResults["loops"][index]["pragma"] = parLoops[loopId]["pragma"];;

		parLoops[loopId]["index"] = index;
		index++;
	}
}

function getInstructionInfo($loop) {
	var instructionInfo = createInstructionInfoObj();
	instructionAnalyser($loop, instructionInfo);

	var functionInstructionInfo = createInstructionInfoObj();
	functionAnalyser($loop, functionInstructionInfo);

	joinInstructionInfoObjs(instructionInfo, functionInstructionInfo);

	return instructionInfo;
}

function createInstructionInfoObj() {
	var instructionInfo = {};

	instructionInfo["arithmeticInstructions"] = 0;
	instructionInfo["logicInstructions"] = 0;
	instructionInfo["comparisonInstructions"] = 0;
	instructionInfo["assignmentInstructions"] = 0;
	instructionInfo["bitwiseInstructions"] = 0;
	instructionInfo["ifInstructions"] = 0;
	instructionInfo["loopInstructions"] = 0;
	instructionInfo["varDeclarationInstructions"] = 0;
	instructionInfo["arrayAccessInstructions"] = 0;
	instructionInfo["level0FunctionCalls"] = 0;
	instructionInfo["totalFunctionCalls"] = 0;
	instructionInfo["totalInstructions"] = 0;
	instructionInfo["hasRecursiveFunctionCall"] = false;

	return instructionInfo;
}

function functionAnalyser($loop, functionInstructionInfo) {
	var functionCalls = $loop.descendants("call");

	for(var functionCall of functionCalls) {
		functionInstructionInfo["level0FunctionCalls"] += 1;
		functionInstructionInfo["totalFunctionCalls"] += 1;
	
		var $function = functionCall.function;
		var $functionDefinition = $function.definitionJp;
		var functionId = $function.id;

		var callStack = [];
		//do i need to check return value here?
		functionAnalyserAux($functionDefinition, functionId, callStack, functionInstructionInfo);	
	}
}

function functionAnalyserAux($functionDefinition, functionId, callStack, functionInstructionInfo) {
	if(callStack.contains(functionId)) {
		functionInstructionInfo["hasRecursiveFunctionCall"] = true;
		return -1;
	}

	instructionAnalyser($functionDefinition, functionInstructionInfo);

	var functionCalls = $functionDefinition.descendants("call");

	for(var functionCall of functionCalls) {
		functionInstructionInfo["totalFunctionCalls"] += 1;
	
		var $function = functionCall.function;
		var $functionDefinition = $function.definitionJp;
		var functionId = $function.id;

		var callStack = Array.from(callStack);
		callStack.push(functionId);
		//do i need to check return value here?
		if(functionAnalyserAux($functionDefinition, functionId, callStack, functionInstructionInfo) != 0) {
			return -1;
		}
	}

	return 0;
}

function instructionAnalyser($jp, instructionInfo) {
	var arithmeticOperators = ["+", "-", "*", "/", "%", "++", "--"];
	var logicOperators = ["||", "&&", "!"];
	var comparisonOperators = ["==", "!=", "<", "<=", ">", ">="];
	var assignmentOperators = ["=", "+=", "-=", "*=", "/=", "%=", "&=", "|=", "^=", ">>=", "<<="];
	var bitwiseOperators = ["&", "|", "^", "~", "<<", ">>"];

	var binaryOps = $jp.descendants("binaryOp");
	var unaryOps = $jp.descendants("unaryOp");
	var ifs = $jp.descendants("if");
	var loops = $jp.descendants("loop");
	var arrayAccesses = $jp.descendants("arrayAccess");
	var varDeclarations = $jp.descendants("varDecl");

	for(var binaryOp of binaryOps) {
		if(arithmeticOperators.contains(binaryOp.operator))
			instructionInfo["arithmeticInstructions"] += 1;
		else if(logicOperators.contains(binaryOp.operator))
			instructionInfo["logicInstructions"] += 1;
		else if(comparisonOperators.contains(binaryOp.operator))
			instructionInfo["comparisonInstructions"] += 1;
		else if(assignmentOperators.contains(binaryOp.operator))
			instructionInfo["assignmentInstructions"] += 1;
		else if(bitwiseOperators.contains(binaryOp.operator))
			instructionInfo["bitwiseInstructions"] += 1;
	}

	for(var unaryOp of unaryOps) {
		if(arithmeticOperators.contains(unaryOp.operator))
			instructionInfo["arithmeticInstructions"] += 1;
		else if(logicOperators.contains(unaryOp.operator))
			instructionInfo["logicInstructions"] += 1;
		else if(comparisonOperators.contains(unaryOp.operator))
			instructionInfo["comparisonInstructions"] += 1;
		else if(assignmentOperators.contains(unaryOp.operator))
			instructionInfo["assignmentInstructions"] += 1;
		else if(bitwiseOperators.contains(unaryOp.operator))
			instructionInfo["bitwiseInstructions"] += 1;
	}
	
	instructionInfo["ifInstructions"] += ifs.length;
	instructionInfo["loopInstructions"] += loops.length;
	instructionInfo["varDeclarationInstructions"] += varDeclarations.length;
	instructionInfo["arrayAccessInstructions"] += arrayAccesses.length;

	instructionInfo["totalInstructions"] += instructionInfo["arithmeticInstructions"] + 
		instructionInfo["logicInstructions"] + 
		instructionInfo["comparisonInstructions"] + 
		instructionInfo["assignmentInstructions"] + 
		instructionInfo["bitwiseInstructions"] + 
		instructionInfo["ifInstructions"] + 
		instructionInfo["loopInstructions"] + 
		instructionInfo["varDeclarationInstructions"] + 
		instructionInfo["arrayAccessInstructions"];
}

function joinInstructionInfoObjs(instructionInfo, functionInstructionInfo) {
	instructionInfo["level0FunctionCalls"] = functionInstructionInfo["level0FunctionCalls"];
	instructionInfo["totalFunctionCalls"] = functionInstructionInfo["level0FunctionCalls"];
	instructionInfo["hasRecursiveFunctionCall"] = functionInstructionInfo["hasRecursiveFunctionCall"];

	if(functionInstructionInfo["hasRecursiveFunctionCall"]) {
		return;
	}

	instructionInfo["arithmeticInstructions"] += functionInstructionInfo["arithmeticInstructions"];
	instructionInfo["logicInstructions"] += functionInstructionInfo["logicInstructions"];
	instructionInfo["comparisonInstructions"] += functionInstructionInfo["comparisonInstructions"];
	instructionInfo["assignmentInstructions"] += functionInstructionInfo["assignmentInstructions"];
	instructionInfo["bitwiseInstructions"] += functionInstructionInfo["bitwiseInstructions"];
	instructionInfo["ifInstructions"] += functionInstructionInfo["ifInstructions"];
	instructionInfo["loopInstructions"] += functionInstructionInfo["loopInstructions"];
	instructionInfo["varDeclarationInstructions"] += functionInstructionInfo["varDeclarationInstructions"];
	instructionInfo["arrayAccessInstructions"] += functionInstructionInfo["arrayAccessInstructions"];
	instructionInfo["totalInstructions"] += functionInstructionInfo["totalInstructions"];
	
}

function getLoopIds($loops) {
	var loopIds = [];

	for (var $loop of $loops) {
		loopIds.push($loop.id);
	}

	return loopIds;
}

function addResults(benchmarkResults, measures, executors, version, loopGroup, parLoops) {
	var isPar = version >= 0;
	
	//var loopIds = Object.keys(parLoops);
	var loopIndexes = getLoopIndexes(loopGroup, parLoops);
	var mainLoopIds = getMainLoopIds(parLoops);
	var mainLoopIndexes = getLoopIndexes(mainLoopIds, parLoops);

	var name = "";
	var info = {};
	if (isPar) {
		name = "par";
		benchmarkResults["par"]["nVersions"] += 1;
		info["version"] = version;
		info["parLoops"] = Array.from(loopIndexes);
		info["mainLoop"] = 0;
		info["measures"] = [];
	}
	else
		name = "seq";

	for(var measure of measures) {
		var measureInfo = {};
		measureInfo["loopIndex"] = parseInt(measure._prefix);
		measureInfo["runs"] = [];
		var runId = 0;
		for(var executor of executors) {
			var res = measure.report(executor);
			var newRes = {};
			newRes.value = res.getValue();
			newRes.unit = res.getUnit();
			measureInfo["runs"].push(newRes);
			runId++;
		}

		if(isPar) {
			info["measures"].push(measureInfo);
			if(mainLoopIndexes.includes(parseInt(measure._prefix)))
				info["mainLoop"] = parseInt(measure._prefix);
		}
		else {
			benchmarkResults["seq"].push(measureInfo);
		}
	}

	if(isPar) {
		benchmarkResults["par"]["versions"].push(info);
	}
	
}

function getSubFolders(sourceFolder, benchmarkFolders, allFolders, excludedFiles, excludedFolders) {
	if (benchmarkFolders.length == 1 && benchmarkFolders[0] == "all")
		benchmarkFolders = allFolders;

	var benchmarks = [];
	var foldersChecked = [];

	for (var folder of benchmarkFolders) {
		var folderPath = sourceFolder + folder;
		
		if(!Io.isFolder(folderPath)) {
			println(folderPath + " is not a valid folder.");
			continue;
		}

		var folder = new LocalFolder(folderPath);
		var fileList = folder.getFileList();

		for (var file of fileList) {
			var fileString = file.toString();
			if(!fileString.endsWith(".c"))
				continue;

			var skipFile = false;
			for(var excludedFile of excludedFiles) {
				if(fileString.endsWith(excludedFile)) {
					skipFile = true;
					break;
				}
			}

			if(skipFile)
				continue;

			var benchmark = createBenchmarkObj(fileString);

			for(excludedFolder of excludedFolders) {
				if(benchmark.folder.endsWith(excludedFolder))
				skipFile = true;
			}

			if(skipFile)
				continue;
	
			
			if(foldersChecked.contains(benchmark.folder))
				continue;

			benchmarks.push(benchmark);
			foldersChecked.push(benchmark.folder);

		}
	}
	return benchmarks;
}

function createBenchmarkObj(fileString) {
	var benchmark = new Object();

	var lastSlash = fileString.lastIndexOf("/");
	var benchGroupNameIndex = fileString.indexOf("/sources/") + 9;
	benchmark.c = Io.getAbsolutePath(fileString);
	benchmark.folder = Io.getAbsolutePath(fileString.slice(0, lastSlash));
	benchmark.outputFolder = Io.getAbsolutePath("./outputs/" + fileString.slice(benchGroupNameIndex, lastSlash));
	benchmark.name = Io.removeExtension(fileString.substring(lastSlash + 1));

	return benchmark;
}

function rebuildCodeAst(benchmark, xtraCs, xtraIncludeFolders, flags) {
	var includeFolders = Array.from(xtraIncludeFolders);
	includeFolders.push(benchmark.folder);

	var dataStore = Clava.getData();
	dataStore.setUserIncludes(includeFolders);
	var flagString = concatFlags(flags);
	dataStore.setFlags(flagString);

	var cs = Array.from(xtraCs);
	cs.push(benchmark.c);
	
	for(var c of cs) {
		var clavaJPFile = ClavaJoinPoints.file(c);
		Clava.addFile(clavaJPFile);
	}

	Clava.rebuild();
}

function addTimerSeq(parallelLoopIds, parLoops) {

	var measures = [];

	for(var result of Query.search('function').search('loop').chain()) {
		if(!parallelLoopIds.includes(result["loop"].id)) {
			continue;
		}

		var measure = new CustomExecutionTimeMetric(parLoops[result["loop"].id]["index"].toString());
		measures.push(measure);
		
		measure.instrument(result["loop"]);
	}

	return measures;
}

function addTimerMainLoop(mainLoopId, mainLoopIndex) {
	var measure;
	for(var result of Query.search('function').search('loop').chain()) {
		if(result["loop"].id != mainLoopId) {
			continue;
		}

		measure = new CustomExecutionTimeMetric(mainLoopIndex);	
		measure.instrument(result["loop"], undefined, true);
		break;
	}
	return measure;
}

function addTimerPar(loopGroup, parLoops) {
	var measures = [];
	//var loopGroupIds = getLoopIds($loopGroup);
	var $loopJps = getLoopsFromIds(loopGroup);
	var mainLoopIds = getMainLoopIds(parLoops);
	var foundMainLoop = false;

	for(var result of Query.search('pragma')) {
		if(result.name != "omp")
			continue;

		var $pragmaLoop = result.target;
		if(!loopGroup.includes($pragmaLoop.id))
			continue;
		
		var measurePrefix = parLoops[$pragmaLoop.id]["index"].toString();
		var measure = new CustomExecutionTimeMetric(measurePrefix);
		measures.push(measure);

		var addExitStatement = false;
		if(mainLoopIds.includes($pragmaLoop.id)) {
			addExitStatement = true;
			foundMainLoop = true;
		}
		
		measure.instrument(result, $pragmaLoop, addExitStatement);
		
	}

	if(!foundMainLoop) {
		var subMainLoopId = getSubMainLoopId(loopGroup, parLoops);
		var mainLoopMeasure = findAndTimeMainLoop(subMainLoopId, parLoops, mainLoopIds);
		measures.push(mainLoopMeasure);
	}

	
	//println("measures.length = " + measures.length);
	//println("measure[0]._prefix = " + measures[0]._prefix);

	//exit(0);

	return measures;
}

function findAndTimeMainLoop(subMainLoopId, parLoops, mainLoopIds) {
	var $subMainLoop = getLoopsFromIds([subMainLoopId])[subMainLoopId];
	var $mainLoopJps = getLoopsFromIds(mainLoopIds);
	var mainLoopMeasure;
	for(var mainLoopId of mainLoopIds) {
		var $mainLoop = $mainLoopJps[mainLoopId];
		if(checkRankDescendant($subMainLoop.rank, $mainLoop.rank)) {
			var mainLoopIndex = parLoops[$mainLoop.id]["index"].toString();
			mainLoopMeasure = addTimerMainLoop($mainLoop.id, mainLoopIndex);
		}
	}

	return mainLoopMeasure;
}

/**
checks if loop with the rank loopRank0 is descendant from the loop with the rank loopRank1
@param loopRank0 int[], rank from loop we intend to check
@param loopRank1 int[], rank from loop we intend to check against
@return true if loop with the rank loopRank0 is descendant from the loop with the rank loopRank1
**/
function checkRankDescendant(loopRank0, loopRank1) {
	if(loopRank0.length <= loopRank1.length)
		return false;
	
	for(var i = 0; i < loopRank1.length; i++) {
		if(loopRank1[i] != loopRank0[i])
			return false;
	}

	return true;
}

function getParLoopGroups(parLoops, loopGroupSizeLimit) {
	var loopGroups = [];
	var processedIds = [];
	var parLoopIds = Object.keys(parLoops);
	var $loopJps = getLoopsFromIds(parLoopIds);
	var currLvl = 0;

	while(processedIds.length < parLoopIds.length) {

		for(var loopId of parLoopIds) {
			var $loop = $loopJps[loopId];
		
			if($loop.nestedLevel != currLvl || processedIds.includes(loopId))
				continue;
		
			var currentGroup = [];
			currentGroup.push([loopId]);
			processedIds.push(loopId);
			parLoops[loopId]["isMainLoop"] = true;
			
			var $loopDescendants = $loop.descendants("loop");
			for(var $descendant of $loopDescendants) {
				if(!parLoopIds.includes($descendant.id)) {
					continue;
				}

				processedIds.push($descendant.id);
				var toAdd = [];
				for(var loops of currentGroup) {
					var newLoops = Array.from(loops);
					newLoops.push($descendant.id);
					toAdd.push(newLoops);
				}

				for(var elem of toAdd) {
					currentGroup.push(elem);
				}

				currentGroup.push([$descendant.id]);
			}
	
			for(var elem of currentGroup) {
				loopGroups.push(elem);
			}
			
		}

		currLvl += 1;
		
	}

	filterLoopGroups(loopGroups, loopGroupSizeLimit);

	return loopGroups;
}

function filterLoopGroups(loopGroups, loopGroupSizeLimit) {
	for(var i = loopGroups.length - 1; i >= 0; i--){
		var loopGroup = loopGroups[i];
		println(loopGroup.length);
		if(loopGroup.length > loopGroupSizeLimit) {
			loopGroups.splice(i, 1);
		}
	}
}

function getParLoops(functionFilters) {
	var loops = getLoopsFiltered(functionFilters);
	
	Parallelize.forLoops(loops);

	var pragmas = Parallelize.getForLoopsPragmas(loops);
	var astIds = Object.keys(pragmas["parallelLoops"]);

	var parLoops = {};
	for(var loop of loops) {
		if(astIds.includes(loop.astId)) {
			var parLoop = {};
			parLoop["pragma"] = pragmas["parallelLoops"][loop.astId];
			parLoop["isMainLoop"] = false;
			parLoops[loop.id] = parLoop;			
		}
	}
	
	return parLoops;
}

function buildAndRun(benchmark, compoundId, nRuns, isPar, problemSizeFlag) {
	var subFolder = "";

	var compoundIdStr = "";
	
	if(isPar) {
		compoundIdStr = String(compoundId);
		compoundIdStr = Strings.replacer(compoundIdStr, / /g, "_");
		subFolder = "/par" + "/" + compoundIdStr;
	}
	else
		subFolder = "/seq";
	
	var folder = Io.mkdir(benchmark.outputFolder + problemSizeFlag + subFolder);
	var buildFolder = Io.mkdir(benchmark.outputFolder + problemSizeFlag + subFolder + "/build");
	Clava.writeCode(folder);

	var cmaker = new CMaker(benchmark.name);

	cmaker.addCurrentAst();
	cmaker.addLibs("m");
	cmaker.addFlags("-O3");	
	if(isPar)
		cmaker.addFlags("-fopenmp");

	var exe = cmaker.build(folder, buildFolder);

	var executors = [];
	var i;
	
	for(i = 0; i < nRuns; i++) {
		var executor = new ProcessExecutor();	
		executor.setPrintToConsole(false);
		var exeOutput = executor.execute(exe.getAbsolutePath());
		executors.push(executor);
	}
	

	return executors;
}

function addPragmas(loopGroup, parLoops) {
	var $loopJps = getLoopsFromIds(loopGroup);

	if(loopGroup.length > 1) {
		var lowestNestedId = getLowestNestedLevel(loopGroup);
		var codeBefore = "omp_set_nested(1);";
		var codeAfter = "omp_set_nested(0);";
		$loopJps[lowestNestedId].insertBefore(codeBefore);
		$loopJps[lowestNestedId].insertAfter(codeAfter);
	}
	

	for(var loopId of loopGroup) {
		$loopJps[loopId].insertBefore(parLoops[loopId]["pragma"]);
	}
	//Clava.rebuild();
}

function getMainLoopIds(parLoops) {
	var mainLoopsIds = [];
	var parLoopIds = Object.keys(parLoops);
	for(var parLoopId of parLoopIds) {
		if(parLoops[parLoopId]["isMainLoop"])
			mainLoopsIds.push(parLoopId);
	}
	
	return mainLoopsIds;
}

function createBenchGroupResultsObj(nRuns, loopGroupSizeLimit) {
	var benchGroupResultsObj = {};
	benchGroupResultsObj["loopGroupSizeLimit"] = loopGroupSizeLimit;
	benchGroupResultsObj["runsPerVersion"] = nRuns;
	benchGroupResultsObj["totalRuns"] = 0;
	benchGroupResultsObj["totalVersions"] = 0;
	benchGroupResultsObj["totalParLoops"] = 0;
	benchGroupResultsObj["totalExecutionTimeInSec"] = 0;
	benchGroupResultsObj["totalBenchmarks"] = 0;
	benchGroupResultsObj["benchmarks"] = [];

	return benchGroupResultsObj;
}

function createBenchResultsObj(benchmark, problemSizeFlag) {
	var benchResultsObj = {};
	benchResultsObj["benchmark"] = benchmark.folder;

	benchResultsObj["problemSizeFlag"] = problemSizeFlag;
	benchResultsObj["par"] = {};
	benchResultsObj["par"]["nVersions"] = 0;
	benchResultsObj["par"]["versions"] = [];
	benchResultsObj["seq"] = [];

	return benchResultsObj;
}


function concatFlags(flags) {
	var flagString = "";

	for(var flag of flags) {
		flagString += flag;
		flagString += " "; 
	}

	return flagString;
}

function getLoopsFiltered(functionFilters) {
	var loops = [];

	for(var result of Query.search('function').search('loop').chain()) {
		var foundLoop = result["loop"];
	
		// Only time loops inside filtered functions
		var skip_loop = false;
		if(functionFilters.length > 0) {
			var skip_loop = true;
			for(var functionFilter of functionFilters) {
				if(result["function"].name.startsWith(functionFilter)) {
					skip_loop = false;
					break;
				}
			}
		}		

		if(skip_loop)
			continue;
		
		loops.push(foundLoop);
	}
	
	return loops;
}

function getLoopsFromIds(loopIdFilters) {
	var loops = {};

	for(var result of Query.search('function').search('loop').chain()) {
		var foundLoop = result["loop"];

		if(loopIdFilters.contains(foundLoop.id))
			loops[foundLoop.id] = foundLoop;
	}
	
	return loops;
}

function getSubMainLoopId(loopGroup, parLoops) {
	var subMainLoopId = loopGroup[0];
	var $loopJps = getLoopsFromIds(loopGroup);
	var found = false;
	while(!found) {
		found = true;
		for(var loopId of loopGroup) {
			var subMainLoopRank = $loopJps[subMainLoopId].rank;
			var newLoopRank = $loopJps[loopId].rank;

			if(checkRankDescendant(loopId, newLoopRank)) {
				subMainLoopId = loopId;
				found = false;
			}
		}
	}

	return subMainLoopId;
}

function getParLoopsFromCache(benchmark,  benchmarkGroup, problemSizeFlag) {
	var parLoops = {};
	var path = "./cache/" + benchmarkGroup + "/" + benchmark.name + "/parLoops" + problemSizeFlag + ".json";
	
	parLoops = Io.readJson(path);
	println(parLoops);

	return parLoops;
}

function writeParLoopsToCache(benchmark, benchmarkGroup, problemSizeFlag, parLoops) {
	var path = "./cache/" + benchmarkGroup + "/" + benchmark.name + "/parLoops" + problemSizeFlag + ".json";
	Io.writeJson(path, parLoops);
}

function getLowestNestedLevel(loopGroup) {
	var lowestNestedId = loopGroup[0];
	var $loopJps = getLoopsFromIds(loopGroup);

	for(var loopId of loopGroup) {
		if($loopJps[loopId].nesteLevel < $loopJps[lowestNestedId].nesteLevel) {
			lowestNestedId = loopId;
		}
	}

	return lowestNestedId;
}