import clava.autopar.Parallelize;
import lara.Io;
import lara.util.LocalFolder;
import clava.ClavaJoinPoints;
import lara.cmake.CMaker;
import weaver.util.WeaverDataStore;
import lara.code.Timer;
import lara.metrics.ExecutionTimeMetric;
import weaver.Query;
import lara.Strings;

var folderSeparator = Io.getSeparator();

function getLoopIndexes(loopGroup, parLoops) {
	var indexes = [];
	for(var loopId of loopGroup) {
		indexes.push(parLoops[loopId]["index"]);
	}

	return indexes;
}

function addLoopInfo(parLoops, benchmarkResults) {
	benchmarkResults["nLoops"] = parLoops.length;
	benchmarkResults["loops"] = {};
	var parLoopIds = Object.keys(parLoops);
	
	for(var loopId of parLoopIds) {
		var index = parLoops[loopId]["index"];	
		benchmarkResults["loops"][index] = parLoops[loopId];
	}
}

function addResults(benchmarkResults, measures, executors, version, loopGroup, parLoops) {
	var MPREFIX_LENGTH = 8;
	var isPar = version >= 0;
	
	var loopIndexes = getLoopIndexes(loopGroup, parLoops);
	var mainLoopIds = getMainLoopIds(parLoops);
	var mainLoopIndexes = getLoopIndexes(mainLoopIds, parLoops);

	var name = "";
	var info = {};
	if (isPar) {
		name = "par";
		benchmarkResults["par"]["nVersions"] += 1;
		info["version"] = version;
		info["parLoops"] = Array.from(loopIndexes);
		info["mainLoop"] = 0;
		info["measures"] = [];
	}
	else
		name = "seq";

	for(var measure of measures) {
		var measureInfo = {};
		var loopIndex = measure._prefix.substring(MPREFIX_LENGTH);
		loopIndex = parseInt(loopIndex);
		measureInfo["loopIndex"] = parseInt(loopIndex);
		measureInfo["runs"] = [];
		var runId = 0;
		for(var executor of executors) {
			var res = measure.report(executor);
			var newRes = {};
			newRes.value = res.getValue();
			newRes.unit = res.getUnit();
			measureInfo["runs"].push(newRes);
			runId++;
		}

		if(isPar) {
			info["measures"].push(measureInfo);
			if(mainLoopIndexes.includes(loopIndex))
				info["mainLoop"] = loopIndex;
		}
		else {
			benchmarkResults["seq"].push(measureInfo);
		}
	}

	if(isPar) {
		benchmarkResults["par"]["versions"].push(info);
	}
	
}

function getBenchmarks(params) {
	var isBenchmarkSet = params["isBenchmarkSet"];
	var sourceFolder = params["sourceFolder"];

	if(!Io.isFolder(sourceFolder)) {
		println(sourceFolder + " is not a valid source folder.");
		exit(-1);
	}

	var benchmarks = []; 
	if(isBenchmarkSet) {
		benchmarks = searchSubFolders(params);
	}
	else {
		benchmarks = searchProgramFiles(params);
	}

	return benchmarks;
}

function searchSubFolders(params) {
	var sourceFolder = params["sourceFolder"];
	var benchmarkFolders = params["benchmarkFolders"];
	var excludedFiles = params["excludedFiles"];
	
	var excludedFolders = [];
	for(var excludedFolder of params["excludedFolders"]) {
		excludedFolders.push(Io.getAbsolutePath(sourceFolder, excludedFolder));
	}

	var benchmarks = [];
	if(benchmarkFolders.length == 0) {
		return benchmarks;
	}
	
	if (benchmarkFolders.length == 1 && benchmarkFolders[0] == "all") {
		benchmarkFolders = [];
		var allFolders = Io.getFolders(sourceFolder);
		
		for (var folder of allFolders) {
			var absolutePathFolder = Io.getAbsolutePath(folder);
			if(!excludedFolders.contains(absolutePathFolder)) {
				benchmarkFolders.push(absolutePathFolder);
			}
		}
	}
	else {
		var newBenchmarkFolders = [];
		for(folder of benchmarkFolders) {
			//newBenchmarkFolders.push(Io.getPath(sourceFolder + folder));
			newBenchmarkFolders.push(Io.getAbsolutePath(sourceFolder, folder));
		}
		benchmarkFolders = newBenchmarkFolders;
	}
	
	var foldersToCheck = Array.from(benchmarkFolders);
	while(foldersToCheck.length > 0 ) {
		var currentFolder = foldersToCheck.pop();

		if (excludedFolders.contains(currentFolder)) {
			continue;
		}
		
		var childFolders = Io.getFolders(currentFolder);
		if(childFolders.length > 0) {
			foldersToCheck = foldersToCheck.concat(childFolders);
			continue;
		}

		var fileExtensions = [".c", ".h", ".cpp", ".hpp"];
		var childFiles = Io.getFiles(currentFolder);
		var selectedFiles = [];
		for(var childFile of childFiles) {
			var isExcluded = false;
			for(var excludedFile of excludedFiles) {
				if (childFile.toString().endsWith(excludedFile)) {
					isExcluded = true;
					break;
				}
			}
			
			if(isExcluded) {
				continue;
			}
			
			var lowerCaseFile = childFile.toString().toLowerCase();
			for(var extension of fileExtensions) {
				if(lowerCaseFile.endsWith(extension)) {
					selectedFiles.push(childFile.toString());
					break;
				}
			}
		}
		if(selectedFiles.length == 0) {
			continue;
		}

		var folderString = currentFolder.toString();
		var benchmarkObj = createBenchmarkObj(folderString, selectedFiles);
		benchmarks.push(benchmarkObj);		
	}

	return benchmarks;
}

//TODO test this
function searchProgramFiles(params) {
	var sourceFolder = params["sourceFolder"];

	var excludedFiles = params["excludedFiles"];
	
	var excludedFolders = [];
	for(var excludedFolder of params["excludedFolders"]) {
		excludedFolders.push(Io.getAbsolutePath(sourceFolder, excludedFolder));
	}

	var benchmarks = [];
	
	benchmarkFolders = [];
	var allFolders = Io.getFolders(sourceFolder);
	for (var folder of allFolders) {
		var absolutePathFolder = Io.getAbsolutePath(folder);
		if(!excludedFolders.contains(absolutePathFolder)) {
			benchmarkFolders.push(absolutePathFolder);
		}
	}

	var selectedFiles = [];
	var foldersToCheck = Array.from(benchmarkFolders);
	while(foldersToCheck.length > 0 ) {
		var currentFolder = foldersToCheck.pop();

		if (excludedFolders.contains(currentFolder)) {
			continue;
		}
		
		var childFolders = Io.getFolders(currentFolder);
		if(childFolders.length > 0) {
			foldersToCheck = foldersToCheck.concat(childFolders);
			continue;
		}

		var fileExtensions = [".c", ".h", ".cpp", ".hpp"];
		var childFiles = Io.getFiles(currentFolder);
		
		for(var childFile of childFiles) {
			var isExcluded = false;
			for(var excludedFile of excludedFiles) {
				if (childFile.toString().endsWith(excludedFile)) {
					isExcluded = true;
					break;
				}
			}
			
			if(isExcluded) {
				continue;
			}
			
			var lowerCaseFile = childFile.toString().toLowerCase();
			for(var extension of fileExtensions) {
				if(lowerCaseFile.endsWith(extension)) {
					selectedFiles.push(childFile.toString());
					break;
				}
			}
		}
	}

	if(selectedFiles.length != 0) {
		var folderString = Io.getAbsolutePath(sourceFolder);
		var benchmarkObj = createBenchmarkObj(folderString, selectedFiles);
		benchmarks.push(benchmarkObj);
	}

	return benchmarks;
}

function createBenchmarkObj(folderPath, files) {
	var benchmark = new Object();

	var benchGroupNameIndex = folderPath.indexOf(folderSeparator + "sources" + folderSeparator) + 9;
	benchmark.files = files;
	benchmark.folder = folderPath;
	benchmark.cacheFolder = Io.getAbsolutePath("." + folderSeparator + "cache" + folderSeparator + folderPath.slice(benchGroupNameIndex));
	benchmark.outputFolder = Io.getAbsolutePath("." + folderSeparator + "outputs" + folderSeparator + folderPath.slice(benchGroupNameIndex));

	var lastSlashFolder = benchmark.folder.lastIndexOf(folderSeparator);
	benchmark.name = benchmark.folder.substring(lastSlashFolder + 1);

	return benchmark;
}

function rebuildCodeAst(params, xtraFiles, xtraIncludeFolders, readFromExpectedC) {
	var benchmark = params["dynamic"]["benchmark"];
	var preprocessorFlags = params["dynamic"]["preprocessorFlags"];

	var includeFolders = Array.from(xtraIncludeFolders);
	includeFolders.push(benchmark.folder);

	var dataStore = Clava.getData();
	dataStore.setUserIncludes(includeFolders);
	var flagString = concatFlags(preprocessorFlags);
	dataStore.setFlags(flagString);

	var files = Array.from(xtraFiles);
	if(readFromExpectedC) {
		var expectedCPath = benchmark.folder + folderSeparator + "expected_output.c";
		files.push(expectedCPath);
	}
	else {
		files = files.concat(benchmark.files);
	}
	
	for(var file of files) {
		var clavaJPFile = ClavaJoinPoints.file(file);
		Clava.addFile(clavaJPFile);
	}

	Clava.rebuild();
}

function addTimerSeq(mainLoopIds, parLoops) {

	var measures = [];

	for(var result of Query.search('function').search('loop').chain()) {
		if(!mainLoopIds.includes(result["loop"].id)) {
			continue;
		}

		var measurePrefix = "mprefix_" + parLoops[result["loop"].id]["index"].toString();
		var measure = new CustomExecutionTimeMetric(measurePrefix);
		measures.push(measure);
		
		measure.instrument(result["loop"]);
	}

	return measures;
}

function addTimerMainLoop(mainLoopId, mainLoopIndex) {
	var measure;
	for(var result of Query.search('function').search('loop').chain()) {
		if(result["loop"].id != mainLoopId) {
			continue;
		}

		var measurePrefix = "mprefix_" + mainLoopIndex;
		measure = new CustomExecutionTimeMetric(measurePrefix);	
		measure.instrument(result["loop"], undefined, true);
		break;
	}
	return measure;
}

function addTimerPar(loopGroup, parLoops) {
	var measures = [];
	var mainLoopIds = getMainLoopIds(parLoops);
	var foundMainLoop = false;

	
	for(var result of Query.search('pragma')) {
		if(result.name != "omp")
			continue;

		var $pragmaLoop = result.target;

		if(!loopGroup.includes($pragmaLoop.id))
			continue;

		if(!mainLoopIds.includes($pragmaLoop.id))
			continue;

		var foundMainLoop = true;

		var $pragmaLoop = result.target;
		var measurePrefix = "mprefix_" + parLoops[$pragmaLoop.id]["index"].toString();
		var measure = new CustomExecutionTimeMetric(measurePrefix);
		measures.push(measure);		
		measure.instrument(result, $pragmaLoop, true);	
	}

	if(!foundMainLoop) {
		var subMainLoopId = getSubMainLoopId(loopGroup, parLoops);
		var mainLoopMeasure = findAndTimeMainLoop(subMainLoopId, parLoops, mainLoopIds);
		measures.push(mainLoopMeasure);
	}

	return measures;
}

function findAndTimeMainLoop(subMainLoopId, parLoops, mainLoopIds) {
	var $subMainLoop = getLoopsFromIds([subMainLoopId])[subMainLoopId];
	var $mainLoopJps = getLoopsFromIds(mainLoopIds);
	var mainLoopMeasure;
	for(var mainLoopId of mainLoopIds) {
		var $mainLoop = $mainLoopJps[mainLoopId];
		if(checkRankDescendant($subMainLoop.rank, $mainLoop.rank)) {
			var mainLoopIndex = parLoops[$mainLoop.id]["index"].toString();
			mainLoopMeasure = addTimerMainLoop($mainLoop.id, mainLoopIndex);
			break;
		}
	}

	return mainLoopMeasure;
}

/**
checks if loop with the rank loopRank0 is descendant from the loop with the rank loopRank1
@param loopRank0 int[], rank from loop we intend to check
@param loopRank1 int[], rank from loop we intend to check against
@return boolean, true if loop with the rank loopRank0 is descendant from the loop with the rank loopRank1
**/
function checkRankDescendant(loopRank0, loopRank1) {
	if(loopRank0.length <= loopRank1.length)
		return false;
	
	for(var i = 0; i < loopRank1.length; i++) {
		if(loopRank1[i] != loopRank0[i])
			return false;
	}

	return true;
}

function getParLoopGroups(parLoops, loopGroupSizeLimit) {
	var loopGroups = [];
	var processedIds = [];
	var parLoopIds = Object.keys(parLoops);
	var $loopJps = getLoopsFromIds(parLoopIds);
	var currLvl = 0;

	while(processedIds.length < parLoopIds.length) {

		for(var loopId of parLoopIds) {
			var $loop = $loopJps[loopId];
		
			if($loop.nestedLevel != currLvl || processedIds.includes(loopId))
				continue;
		
			var currentGroup = [];
			currentGroup.push([loopId]);
			processedIds.push(loopId);
			parLoops[loopId]["features"]["static"]["isMainLoop"] = true;
			
			var $loopDescendants = $loop.descendants("loop");
			for(var $descendant of $loopDescendants) {
				if(!parLoopIds.includes($descendant.id)) {
					continue;
				}

				processedIds.push($descendant.id);
				var toAdd = [];
				for(var loops of currentGroup) {
					var newLoops = Array.from(loops);
					newLoops.push($descendant.id);
					toAdd.push(newLoops);
				}

				for(var elem of toAdd) {
					currentGroup.push(elem);
				}

				currentGroup.push([$descendant.id]);
			}
	
			for(var elem of currentGroup) {
				loopGroups.push(elem);
			}
			
		}

		currLvl += 1;
		
	}

	filterLoopGroups(loopGroups, loopGroupSizeLimit);

	return loopGroups;
}

function filterLoopGroups(loopGroups, loopGroupSizeLimit) {
	for(var i = loopGroups.length - 1; i >= 0; i--){
		var loopGroup = loopGroups[i];
		if(loopGroup.length > loopGroupSizeLimit) {
			loopGroups.splice(i, 1);
		}
	}
}

function createParLoopObj() {
	var parLoopObj = {};

	//standard info
	parLoopObj["id"] = "";
	parLoopObj["ompPragma"] = "";
	parLoopObj["parentLoopId"] = "";
	parLoopObj["origLine"] = -1;
	parLoopObj["rank"] = [];
	parLoopObj["index"] = -1;

	//features
	parLoopObj["features"] = {};

	//static
	parLoopObj["features"]["static"] = {};
	parLoopObj["features"]["static"]["isMainLoop"] = false;
	parLoopObj["features"]["static"]["nestedLevel"] = -1;
	parLoopObj["features"]["static"]["isInnermost"] = false;
	parLoopObj["features"]["static"]["isOutermost"] = false;

	parLoopObj["features"]["static"]["omp_n_privates"] = 0;
	parLoopObj["features"]["static"]["omp_n_first_privates"] = 0;
	parLoopObj["features"]["static"]["omp_n_reductions"] = 0;
	parLoopObj["features"]["static"]["omp_n_scalar_reductions"] = 0;
	parLoopObj["features"]["static"]["omp_n_array_reductions"] = 0;
	
	parLoopObj["features"]["static"]["instructionInfo"] = {};


	//dynamic
	parLoopObj["features"]["dynamic"] = {};
	
	//iteration info
	parLoopObj["features"]["dynamic"]["maxIterations"] = 0;
	parLoopObj["features"]["dynamic"]["minIterations"] = 0;
	parLoopObj["features"]["dynamic"]["avgIterations"] = 0;
	parLoopObj["features"]["dynamic"]["stdDevIterations"] = 0;
	parLoopObj["features"]["dynamic"]["timesLoopIsCalled"] = 0;
	parLoopObj["features"]["dynamic"]["hasIterationVariation"] = false;
	
	//parent iteration info
	parLoopObj["features"]["dynamic"]["maxParentIterations"] = 0;
	parLoopObj["features"]["dynamic"]["minParentIterations"] = 0;
	parLoopObj["features"]["dynamic"]["avgParentIterations"] = 0;
	parLoopObj["features"]["dynamic"]["stdDevParentIterations"] = 0;
	parLoopObj["features"]["dynamic"]["hasParentIterationVariation"] = false;
	
	parLoopObj["features"]["dynamic"]["timesParentLoopIsCalled"] = 0;
	
	parLoopObj["features"]["dynamic"]["instructionInfo"] = {};

	return parLoopObj;
}

function getParLoops(functionFilters) {
	Clava.pushAst();
	var loops = getLoopsFiltered(functionFilters, true);
	var pragmas = Parallelize.getForLoopsPragmas(loops, false, true);
	var loopIds = Object.keys(pragmas["parallelLoops"]);

	var parLoops = {};
	for(var loop of loops) {
		if(loopIds.includes(loop.id)) {
			var parLoop = createParLoopObj();
			var parentLoopId = "NULL";
			if(loop.nestedLevel > 0) {
				var $parentLoop = loop.ancestor("loop");
				if($parentLoop.kind == "for")
					parentLoopId = loop.ancestor("loop").id;
			}
			parLoop["id"] = loop.id;
			parLoop["ompPragma"] = pragmas["parallelLoops"][loop.id];
			parLoop["parentLoopId"] = parentLoopId;
			getOmpPragmaFeatures(parLoop);
			parLoops[loop.id] = parLoop;	

		}
	}
	
	Clava.popAst();
	return parLoops;
}

function getParLoopsFromExpectedOutput(params) {
	Clava.pushAst();
	rebuildCodeAst(params, params["xtraFiles"], params["xtraIncludeFolders"], true);
	var ompPragmas = getOmpPragmas();
	var benchmark = params["dynamic"]["benchmark"];

	var parLoops = {};
	for(var pragma of ompPragmas) {
		var $loop = pragma.target;
		var loopId = $loop.id;
		loopId = fixLoopId(loopId, benchmark);
		var parLoop = createParLoopObj();
		var parentLoopId = "NULL";
		if($loop.nestedLevel > 0) {
			var $parentLoop = $loop.ancestor("loop");
			if($parentLoop.kind == "for")
				parentLoopId = fixLoopId($loop.ancestor("loop").id, benchmark);
		}
		parLoop["id"] = loopId;
		parLoop["ompPragma"] = pragma.code;
		parLoop["parentLoopId"] = parentLoopId;
		getOmpPragmaFeatures(parLoop);
		parLoops[loopId] = parLoop;	
	}
	
	Clava.popAst();
	return parLoops;
}

function getOmpPragmaFeatures(parLoop) {
	var pragma = parLoop["ompPragma"];

	var privateRegex =  /private([^)]+)/g;
	var privateResult = pragma.match(privateRegex);
	if (privateResult && privateResult.length > 0) {
		var nPrivates = privateResult[0].split(",");
		parLoop["features"]["static"]["omp_n_privates"] = nPrivates.length;
	};

	var firstPrivateRegex =  /firstprivate([^)]+)/g;
	var firstPrivateResult = pragma.match(firstPrivateRegex);
	if (firstPrivateResult && firstPrivateResult.length > 0) {
		var nFirstPrivates = firstPrivateResult[0].split(",");
		parLoop["features"]["static"]["omp_n_first_privates"] = nFirstPrivates.length;
	};

	var reductionRegex =  /reduction([^)]+)/g;
	var reductionResult = pragma.match(reductionRegex);
	if (reductionResult && reductionResult.length > 0) {
		parLoop["features"]["static"]["omp_n_reductions"] = reductionResult.length;
		for(var reduction of reductionResult) {
			if(reduction.includes("[")) {
				parLoop["features"]["static"]["omp_n_array_reductions"] += 1;
			}
			else {
				parLoop["features"]["static"]["omp_n_scalar_reductions"] += 1;
			}
		}
	};
}

function fixLoopId(loopId, benchmark) {
	var newLoopId = "";

	var lastSlashIndex = benchmark.files[0].lastIndexOf(folderSeparator);
	var filename = benchmark.files[0].substr(lastSlashIndex + 1);
	var arrowIndex = loopId.indexOf("->");
	var restOfId = loopId.substr(arrowIndex);

	newLoopId = "file$" + filename + restOfId;

	return newLoopId;
}

function buildAndRun(params, version, nRuns, isPar, cleanBuild) {
	var benchmark = params["dynamic"]["benchmark"];
	var problemSizeFlag = params["dynamic"]["problemSizeFlag"];
	var loopGroupSizeLimit = params["loopGroupSizeLimit"];

	var subFolder = "";
	if(isPar) {
		subFolder = folderSeparator + "par"+ folderSeparator + loopGroupSizeLimit + folderSeparator + version;
	}
	else
		subFolder = folderSeparator + "seq";

	var folderPath = benchmark.outputFolder + problemSizeFlag + subFolder;
	var buildFolderPath = folderPath + folderSeparator + "build";
	
	var folder = Io.mkdir(folderPath);
	var buildFolder = Io.mkdir(buildFolderPath);
	
	if(cleanBuild) {
		Io.deleteFolderContents(buildFolder);
	}
	Clava.writeCode(folder);

	var cmaker = new CMaker(benchmark.name);

	cmaker.addCurrentAst();
	for(lib of params["compilationLibs"])
		cmaker.addLibs(lib);

	for(flag of params["compilationFlags"])
		cmaker.addFlags(flag);

	if(isPar)
		cmaker.addFlags("-fopenmp");

	var exe = cmaker.build(folder, buildFolder);
	var executors = [];

	if(exe === undefined) {
		println("Build failed");
		return executors;
	}
	
	for(var i = 0; i < nRuns; i++) {
		var executor = new ProcessExecutor();	
		executor.setPrintToConsole(false);
		executor.execute(exe.getAbsolutePath());
		executors.push(executor);
	}

	return executors;
}

function addPragmas(loopGroup, parLoops) {
	var $loopJps = getLoopsFromIds(loopGroup);

	if(loopGroup.length > 1) {
		var lowestNestedId = getLowestNestedLevel(loopGroup);
		var codeBefore = "omp_set_nested(1);";
		var codeAfter = "omp_set_nested(0);";
		$loopJps[lowestNestedId].insertBefore(codeBefore);
		$loopJps[lowestNestedId].insertAfter(codeAfter);
	}
	

	for(var loopId of loopGroup) {
		$loopJps[loopId].insertBefore(parLoops[loopId]["ompPragma"]);
	}
}

function getMainLoopIds(parLoops) {
	var mainLoopsIds = [];
	var parLoopIds = Object.keys(parLoops);
	for(var parLoopId of parLoopIds) {
		if(parLoops[parLoopId]["features"]["static"]["isMainLoop"])
			mainLoopsIds.push(parLoopId);
	}
	
	return mainLoopsIds;
}

function createAnalyzerResultsObj(loopGroupSizeLimit) {
	var analyzerResultsObj = {};
	analyzerResultsObj["loopGroupSizeLimit"] = loopGroupSizeLimit;
	analyzerResultsObj["totalRuns"] = 0;
	analyzerResultsObj["totalVersions"] = 0;
	analyzerResultsObj["totalParLoops"] = 0;
	analyzerResultsObj["totalExecutionTimeInSec"] = 0;
	analyzerResultsObj["totalBenchmarks"] = 0;
	analyzerResultsObj["totalBenchmarkVersions"] = 0;
	analyzerResultsObj["benchmarks"] = [];

	return analyzerResultsObj;
}

function createBenchResultsObj(benchmark, problemSizeFlag) {
	var benchResultsObj = {};
	benchResultsObj["benchmark"] = benchmark.folder;

	benchResultsObj["problemSizeFlag"] = problemSizeFlag;
	benchResultsObj["par"] = {};
	benchResultsObj["par"]["nVersions"] = 0;
	benchResultsObj["par"]["versions"] = [];
	benchResultsObj["seq"] = [];

	return benchResultsObj;
}


function concatFlags(flags) {
	var flagString = "";

	for(var flag of flags) {
		flagString += flag;
		flagString += " "; 
	}

	return flagString;
}

/**
searches for loops
@param functionFilters String[], ...
@param isInclusive boolean, if true only retrieve loops inside the filtered functions
@return joinpoint[], ...
**/
function getLoopsFiltered(functionFilters, isInclusive) {
	var loops = [];

	for(var result of Query.search('function').search('loop').chain()) {
		var foundLoop = result["loop"];

		if(foundLoop.kind != "for")
			continue;
	
		var skip_loop = false;
		if(functionFilters.length > 0) {
			var skip_loop = isInclusive;
			for(var functionFilter of functionFilters) {
				if(result["function"].name.startsWith(functionFilter)) {
					skip_loop = !isInclusive;
					break;
				}
			}
		}		

		if(skip_loop)
			continue;
		
		loops.push(foundLoop);
	}
	
	return loops;
}

function getLoopsFromIds(loopIdFilters) {
	var loops = {};

	for(var result of Query.search('loop')) {
		var foundLoop = result;
		
		if(loopIdFilters.contains(foundLoop.id)) {
			loops[foundLoop.id] = foundLoop;
		}
	}
	
	return loops;
}

function getLoopsModelTester() {
	var loops = [];
	var foundKernelPragma = false;
	var pragmaKernelJp = null;
	
	for(var result of Query.search('pragma')) {
		if(result.name == "kernel") {
			pragmaKernelJp = result.target;
			foundKernelPragma = true;
			break;
		}
	}

	if(foundKernelPragma) {
		for(var result of Query.searchFrom(pragmaKernelJp, 'loop')) {
			if(result.kind != "for")
				continue;

			loops.push(result);
		}
	}
	else {
		for(var result of Query.search('function').search('loop').chain()) {
			var foundLoop = result["loop"];
	
			if(foundLoop.kind != "for" || !(result["function"].name.startsWith("kernel"))) {
				continue;
			}
			
			loops.push(foundLoop);
		}
	}
	
	return loops;
}

function getSubMainLoopId(loopGroup, parLoops) {
	var subMainLoopId = loopGroup[0];
	var $loopJps = getLoopsFromIds(loopGroup);
	var found = false;
	while(!found) {
		found = true;
		for(var loopId of loopGroup) {
			var subMainLoopRank = $loopJps[subMainLoopId].rank;
			var newLoopRank = $loopJps[loopId].rank;

			if(checkRankDescendant(loopId, newLoopRank)) {
				subMainLoopId = loopId;
				found = false;
			}
		}
	}

	return subMainLoopId;
}

function getOmpPragmas() {
	var ompPragmas = [];

	for(var result of Query.search('omp')) {
		ompPragmas.push(result);
	}
	return ompPragmas;
}

function getObjFromCache(params, objectName) {
	var benchmarkCacheFolder = params["dynamic"]["benchmark"].cacheFolder;
	var problemSizeFlag = params["dynamic"]["problemSizeFlag"];
	var loopGroupSizeLimit = params["loopGroupSizeLimit"];

	var path = benchmarkCacheFolder + problemSizeFlag + folderSeparator + objectName + "-" + loopGroupSizeLimit + ".json";
	var obj = Io.readJson(path);

	return obj;
}

function writeObjToCache(params, objectName, obj) {
	var benchmarkCacheFolder = params["dynamic"]["benchmark"].cacheFolder;
	var problemSizeFlag = params["dynamic"]["problemSizeFlag"];
	var loopGroupSizeLimit = params["loopGroupSizeLimit"];

	var path = benchmarkCacheFolder + problemSizeFlag + folderSeparator + objectName + "-" + loopGroupSizeLimit + ".json";
	Io.writeJson(path, obj);
}

function getLowestNestedLevel(loopGroup) {
	var lowestNestedId = loopGroup[0];
	var $loopJps = getLoopsFromIds(loopGroup);

	for(var loopId of loopGroup) {
		if($loopJps[loopId].nesteLevel < $loopJps[lowestNestedId].nesteLevel) {
			lowestNestedId = loopId;
		}
	}

	return lowestNestedId;
}

function testPragmas(parLoops, params) {
	var NO_TESTING = 0;
	var STRICTNESS_LOW = 1;
	var STRICTNESS_HIGH = 2;

	var test_strictness = params["autoParSelectorFlags"]["testPragmas"];

	var removedPragmas = {};
	if(test_strictness == NO_TESTING)
		return removedPragmas;
	
	loopIds = Object.keys(parLoops);
	$loops = getLoopsFromIds(loopIds);

	var nLoops = loopIds.length;
	println("Testing pragmas for problems");
	println("parLoops size before tests = " + nLoops);

	var counter = 1;
	for(loopId of loopIds) {
		var msg_prefix = counter + "/" + nLoops + " " + loopId;
	
		Clava.pushAst();

		if(test_strictness == STRICTNESS_LOW)
			$loops[loopId].insertAfter("exit(0);");
		addPragmas([loopId], parLoops);

		var executors = buildAndRun(params, "testPragmas", 1, true, true);
		if(executors.length == 0) {
			removedPragmas[loopId] = parLoops[loopId];
			delete parLoops[loopId];
			println(msg_prefix + " pragma failed. Removing it from parLoops.");
		}
		else {
			var executorPar = executors[0];
			var returnValue = executorPar.getReturnValue();
			if(returnValue != params["expectedReturnValue"]) {
				removedPragmas[loopId] = parLoops[loopId];
				delete parLoops[loopId];
				println(msg_prefix + " pragma failed. Removing it from parLoops. Return value = " + returnValue);
			}
			else
				println(msg_prefix + " pragma passed sucessfully. Return value = " + returnValue);
		}

		Clava.popAst();

		counter++;
	}

	println("parLoops size after tests = " + Object.keys(parLoops).length);

	return removedPragmas;
}

function updateDynamicParams(params, benchmark, problemSizeFlag) {
	params["dynamic"] = {};
	params["dynamic"]["benchmark"] = benchmark;
	params["dynamic"]["problemSizeFlag"] = problemSizeFlag;
	params["dynamic"]["preprocessorFlags"] = Array.from(params["preprocessorFlags"]);
	if(params["dynamic"]["problemSizeFlag"] != params["defaultFlag"]) {
		params["dynamic"]["preprocessorFlags"].push(problemSizeFlag);
	}
}

function checkEmptyParLoops(parLoops, params) {
	if(Object.keys(parLoops).length == 0) {
		writeObjToCache(params, "parLoops", parLoops);
		return true;
	}

	return false;
}

function createModelTesterObj() {
	var modelTesterObj = {};
	modelTesterObj["modelName"] = "";
	modelTesterObj["modelClassification"] = false;
	modelTesterObj["targetIds"] = [];
	modelTesterObj["targetProblemSizeFlags"] = [];
	modelTesterObj["targetOmpPragmas"] = [];
	modelTesterObj["targetPredictions"] = [];
	modelTesterObj["targetValuesPostProcess"] = [];
	modelTesterObj["targetValuesOrig"] = [];
	modelTesterObj["classification_stats"] = {};
	modelTesterObj["r2_score"] = 0;
	modelTesterObj["parByModel"] = [];
	modelTesterObj["parByAutoPar"] = [];
	modelTesterObj["benchmarks_runs"] = {};
	
	modelTesterObj["global_stats"] = {};
	modelTesterObj["global_stats"]["parCandidates"] = 0;
	modelTesterObj["global_stats"]["parPrediction"] = 0;
	modelTesterObj["global_stats"]["parModel"] = 0;
	modelTesterObj["global_stats"]["parAutoPar"] = 0;
	modelTesterObj["global_stats"]["parModel_NotAutoPar"] = 0;
	modelTesterObj["global_stats"]["parAutoPar_NotModel"] = 0;
	modelTesterObj["global_stats"]["parPrediction_NotModel"] = 0;
	modelTesterObj["global_stats"]["parAutoPar_AndModel"] = 0;
	modelTesterObj["global_stats"]["parAutoPar_AndPrediction"] = 0;

	return modelTesterObj;
}

function createBenchStatsObj() {
	var benchStatsObj = {};

	benchStatsObj["parCandidates"] = 0;
	benchStatsObj["parPrediction"] = 0;
	benchStatsObj["parModel"] = 0;
	benchStatsObj["parAutopar"] = 0;
	benchStatsObj["parModel_NotAutoPar"] = 0;
	benchStatsObj["parAutoPar_NotModel"] = 0;
	benchStatsObj["parPrediction_NotModel"] = 0;
	benchStatsObj["parAutoPar_AndModel"] = 0;
	benchStatsObj["parAutoPar_AndPrediction"] = 0;

	return benchStatsObj;
}

function updateBenchStats(benchStats, parInfoModel, parInfoAutopar, commentedLoopPragmas) {
	var parLoopIds = Object.keys(parInfoAutopar["parallelLoops"]);
	var loops = getLoopsFromIds(parLoopIds);

	benchStats["parCandidates"] = parLoopIds.length;
	benchStats["parPrediction"] = parInfoModel["selectedIds"].length;
	benchStats["parModel"] = parInfoModel["parLoopIds"].length;

	for(var loopId of parLoopIds) {
		if(!commentedLoopPragmas.includes(loopId)) {
			benchStats["parAutopar"] += 1;

			if(parInfoModel["parLoopIds"].includes(loopId)) {
				benchStats["parAutoPar_AndModel"] += 1;
			}
			else {
				benchStats["parAutoPar_NotModel"] += 1;
			}

			if(parInfoModel["selectedIds"].includes(loopId)) {
				benchStats["parAutoPar_AndPrediction"] += 1;
			}
		}
		else {

			if(parInfoModel["parLoopIds"].includes(loopId)) {
				benchStats["parModel_NotAutoPar"] += 1;
			}
		}

		if(parInfoModel["selectedIds"].includes(loopId) && !parInfoModel["parLoopIds"].includes(loopId)) {
			benchStats["parPrediction_NotModel"] += 1;
		}
	}
}

function createBenchTimeObj(benchName, problemSizeFlag, modelTime, autoparTime) {
	var benchTimeObj = {};
	benchTimeObj["benchName"] = "";
	benchTimeObj["problemSizeFlag"] = "";
	benchTimeObj["modelTime"] = -1;
	benchTimeObj["autoparTime"] = -1;

	return benchTimeObj;
}

function getModelPredictionsInfo(modelTesterObj, resultsFile) {
	var path = "." + folderSeparator + "model-outputs" + folderSeparator + resultsFile + ".json";
	var obj = Io.readJson(path);

	modelTesterObj["modelName"] = obj["modelName"];
	modelTesterObj["modelClassification"] = obj["modelClassification"];
	modelTesterObj["targetIds"] = obj["targetIds"];
	modelTesterObj["targetProblemSizeFlags"] = obj["targetProblemSizeFlags"];
	modelTesterObj["targetOmpPragmas"] = obj["targetOmpPragmas"];
	modelTesterObj["targetPredictions"] = obj["targetPredictions"];
	modelTesterObj["targetValuesPostProcess"] = obj["targetValuesPostProcess"];
	modelTesterObj["targetValuesOrig"] = obj["targetValuesOrig"];
	modelTesterObj["classification_stats"] = obj["classification_stats"];
	modelTesterObj["r2_score"] = obj["r2_score"];
	
	
	return modelTesterObj;
}

//check this function
function addPragmasModelTester(modelTesterObj, functionFilters, problemSizeFlag) {
	//var $loopJps = getLoopsFiltered(functionFilters, true);
	var $loopJps = getLoopsModelTester();
	var loopGroups = getParLoopGroupsModelTester($loopJps);
	var selectedLoops = {};
	var loopIds = [];
	var parLoopIds = [];
	
	for(var $loop of $loopJps) {
		loopIds.push($loop.id);
	}

	for(var i = 0; i < modelTesterObj["targetIds"].length; i++) {
		var targetId = modelTesterObj["targetIds"][i];
		var targetProblemSize = modelTesterObj["targetProblemSizeFlags"][i];
		if(!loopIds.includes(targetId)) {
			continue;
		}

		for(var $loop of $loopJps) {
			var loopId = $loop.id;
			if(loopId == targetId && targetProblemSize == problemSizeFlag) {
				if((modelTesterObj["modelClassification"] && modelTesterObj["targetPredictions"][i] == 0) || 
					(!modelTesterObj["modelClassification"] && modelTesterObj["targetPredictions"][i] <= 1)) {
					continue;
				}
				
				selectedLoops[loopId] = {
					"loopJp": $loop,
					"ompPragma": modelTesterObj["targetOmpPragmas"][i],
					"prediction": modelTesterObj["targetPredictions"][i]
				};
				break;
			}
		}
	}

	var selectedIds = Object.keys(selectedLoops);

	for(var loopGroup of loopGroups) {
		var $loop;
		var prediction = 0;
		var nestedLevel = 0;
		var pragma = "";
		var firstIter = true;
		
		for(var loopId of loopGroup) {
			if(!selectedIds.includes(loopId)) {
				continue;
			}

			if(firstIter) {
				if((modelTesterObj["modelClassification"] && selectedLoops[loopId]["prediction"] == 0) || 
					(!modelTesterObj["modelClassification"] && selectedLoops[loopId]["prediction"] <= 1)) {
					continue;
				}
				
				$loop = selectedLoops[loopId]["loopJp"];
				prediction = selectedLoops[loopId]["prediction"];
				nestedLevel = selectedLoops[loopId]["loopJp"].nestedLevel;
				pragma = selectedLoops[loopId]["ompPragma"];
				firstIter = false;
			}
			else {
				if((modelTesterObj["modelClassification"] && selectedLoops[loopId]["prediction"] == 1 && 
				selectedLoops[loopId]["loopJp"].nestedLevel < nestedLevel) || (!modelTesterObj["modelClassification"] && 
				selectedLoops[loopId]["prediction"] > prediction)) {
					$loop = selectedLoops[loopId]["loopJp"];
					prediction = selectedLoops[loopId]["prediction"];
					nestedLevel = selectedLoops[loopId]["loopJp"].nestedLevel;
					pragma = selectedLoops[loopId]["ompPragma"];
				}
			}

		}

		//check if at least one suitable loop was found
		if(!firstIter) {
			$loop.insertBefore(pragma);
			parLoopIds.push($loop.id);
		}
	}

	var parInfoModel = {
		"selectedIds": selectedIds,
		"parLoopIds": parLoopIds
	};

	return parInfoModel;
}

function addTimerModelTester() {
	var measures = [];
	var foundKernelPragma = false;

	var jpToMeasure = null;
	
	for(var result of Query.search('pragma')) {
		if(result.name == "kernel") {
			jpToMeasure = result;
			foundKernelPragma = true;

			var measurePrefix = "mprefix_performance";
			var measure = new CustomExecutionTimeMetric(measurePrefix);
			measures.push(measure);		
			measure.instrument(jpToMeasure, jpToMeasure.target, false);
			break;
		}
	}

	if(!foundKernelPragma) {
		for(var result of Query.search('call')) {
			if(result.name.startsWith("kernel")) {
				jpToMeasure = result;
				var measurePrefix = "mprefix_performance";
				var measure = new CustomExecutionTimeMetric(measurePrefix);
				measures.push(measure);		
				measure.instrument(jpToMeasure, undefined, false);
				break;
			}
		}
	}
	
	return measures;
}

function updateModelTesterObj(modelTesterObj, benchmarkFolder, problemSizeFlag, measures, executors, isAutoPar) {
	for(var measure of measures) {
		var runs = [];
		var avg = {
			"value": 0,
			"unit": ""
		};
		var valid_avg = false;
		
		for(var executor of executors) {
			var res = measure.report(executor);
			var newRes = {};
			newRes.value = res.getValue();
			newRes.unit = res.getUnit();
			runs.push(newRes);
			avg.value += res.getValue();;
			avg.unit = res.getUnit();
		}
		
		if(executors.length != 0) {
			avg.value /= executors.length;
		}

		if(isAutoPar) {
			modelTesterObj["benchmarks_runs"][benchmarkFolder][problemSizeFlag]["autopar_times"] = runs;
			
			modelTesterObj["benchmarks_runs"][benchmarkFolder][problemSizeFlag]["autopar_times_avg"] = avg;
			
			modelTesterObj["benchmarks_runs"][benchmarkFolder][problemSizeFlag]["model_speedup_against_autopar"] = 
				modelTesterObj["benchmarks_runs"][benchmarkFolder][problemSizeFlag]["autopar_times_avg"]["value"] / 
				modelTesterObj["benchmarks_runs"][benchmarkFolder][problemSizeFlag]["model_times_avg"]["value"];
		}
		else {
			modelTesterObj["benchmarks_runs"][benchmarkFolder][problemSizeFlag]["model_times"] = runs;
			modelTesterObj["benchmarks_runs"][benchmarkFolder][problemSizeFlag]["model_times_avg"] = avg;
		}
	}
}

function addBenchStatsModelTesterObj(modelTesterObj, benchmarkFolder, problemSizeFlag, benchStats) {
	modelTesterObj["benchmarks_runs"][benchmarkFolder][problemSizeFlag]["stats"] = benchStats;
	var keys = Object.keys(benchStats);

	modelTesterObj["global_stats"]["parCandidates"] += benchStats["parCandidates"];
	modelTesterObj["global_stats"]["parPrediction"] += benchStats["parPrediction"];
	modelTesterObj["global_stats"]["parModel"] += benchStats["parModel"];
	modelTesterObj["global_stats"]["parAutoPar"] += benchStats["parAutopar"];
	modelTesterObj["global_stats"]["parModel_NotAutoPar"] += benchStats["parModel_NotAutoPar"];
	modelTesterObj["global_stats"]["parAutoPar_NotModel"] += benchStats["parAutoPar_NotModel"];
	modelTesterObj["global_stats"]["parPrediction_NotModel"] += benchStats["parPrediction_NotModel"];
	modelTesterObj["global_stats"]["parAutoPar_AndModel"] += benchStats["parAutoPar_AndModel"];;
	modelTesterObj["global_stats"]["parAutoPar_AndPrediction"] += benchStats["parAutoPar_AndPrediction"];
}

function getParLoopGroupsModelTester($loopJps) {
	var loopGroups = [];
	var processedIds = [];
	var loopIds = [];
	var currLvl = 0;

	for(var $loop of $loopJps) {
		loopIds.push($loop.id);
	}

	while(processedIds.length < $loopJps.length) {

		for(var $loop of $loopJps) {
			var loopId = $loop.id;
		
			if($loop.nestedLevel != currLvl || processedIds.includes(loopId))
				continue;
		
			var currentGroup = [];
			currentGroup.push(loopId);
			processedIds.push(loopId);
			
			var $loopDescendants = $loop.descendants("loop");
			for(var $descendant of $loopDescendants) {
				if(!loopIds.includes($descendant.id)) {
					continue;
				}

				processedIds.push($descendant.id);
				currentGroup.push($descendant.id);
			}

			loopGroups.push(currentGroup);
		}
		currLvl += 1;
	}

	return loopGroups;
}

